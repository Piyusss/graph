class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        int dr[4]={0,0,1,-1};
        int dc[4]={1,-1,0,0};
        int vis[n][m];
        queue<pair<pair<int,int>,int>>q;
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(grid[i][j]==2){
                    vis[i][j]=1;
                    q.push({{i,j},0});
                }
                else{
                    vis[i][j]=0;
                }
            }
        }
        int tm=0;
        while(!q.empty()){
            int qr=q.front().first.first;
            int qc=q.front().first.second;
            int t=q.front().second;
            tm=max(tm,t);
            q.pop();
            for(int k=0 ; k<4 ; k++){
                int nr=qr+dr[k];
                int nc=qc+dc[k];
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && vis[nr][nc]!=1){
                    vis[nr][nc]=1;
                    q.push({{nr,nc},t+1});
                }
            }
        }
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(grid[i][j]==1 && vis[i][j]!=1){
                    return -1;
                }
            }
        }
        return tm;
    }
};
