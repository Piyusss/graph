// User function Template for C++
class Solution {
    private:
    void dfs(int node , int vis[] , vector<pair<int,int>>adjLs[] , 
    stack<int>&st){
        vis[node]=1;
        for(auto it:adjLs[node]){
            int v=it.first;
            if(!vis[v]){
                dfs(v,vis,adjLs,st);
            }
        }
        st.push(node);
    }
  public:
     vector<int> shortestPath(int V,int E, vector<vector<int>>& edges){
        //generate AdjencyList
        vector<pair<int,int>>adjLs[V];
        for(int i=0 ; i<E ; i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adjLs[u].push_back({v,wt});
        }
        
        //finding toposort
        int vis[V]={0};
        stack<int>st;
        for(int i=0 ; i<V ; i++){
            if(!vis[i]){
                dfs(i,vis,adjLs,st);
            }
        }
        
        //final step
        vector<int>dist(V);
        for(int i=0 ; i<V ; i++)dist[i]=1e9;
        dist[0]=0;
        while(!st.empty()){
            int node=st.top();
            st.pop();
            for(auto it:adjLs[node]){
                int v=it.first;
                int wt=it.second;
                if(dist[node]+wt<dist[v]){
                    dist[v]=dist[node]+wt;
                }
            }
        }
        int temp=dist.size();
        for(int i=0 ; i<temp ; i++){
            if(dist[i]==1e9)dist[i]=-1;
        }
        return dist;
    }
};
