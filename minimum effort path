class Solution {
  public:
    int MinimumEffort(vector<vector<int>>& heights) {
        // Code here
        
        int n=heights.size();
        int m=heights[0].size();
        
        priority_queue<pair<int,pair<int,int>> , 
        vector<pair<int,pair<int,int>>> ,
        greater<pair<int,pair<int,int>>>
        >pq;
        pq.push({0,{0,0}});
        
        vector<vector<int>>dist(n,vector<int>(m,1e9));
        dist[0][0]=0;
        
        int dr[4]={0,0,1,-1};
        int dc[4]={1,-1,0,0};
        
        while(!pq.empty()){
            auto it=pq.top();
            int diff=it.first;
            int r=it.second.first;
            int c=it.second.second;
            if(r==n-1 && c==m-1)return diff;
            pq.pop();
            
            for(int k=0 ; k<4 ; k++){
                int nr=r+dr[k];
                int nc=c+dc[k];
                if(nr>=0 && nr<n && nc>=0 && nc<m){
                    int newEffort=max(abs(heights[r][c]-heights[nr][nc]),diff);
                    if(newEffort<dist[nr][nc]){
                        dist[nr][nc]=newEffort;
                        pq.push({newEffort,{nr,nc}});
                    }
                }
            }
        }
        return 0;
    }
};
