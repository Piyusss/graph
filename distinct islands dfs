// User function Template for C++

class Solution {
    private:
    void dfs(int row,int col,int n,int m,int dr[],int dc[],vector<vector<int>>&vis , 
    vector<vector<int>>&grid,vector<pair<int,int>>&vec,int row0 , int col0){
        vis[row][col]=1;
        vec.push_back({row-row0,col-col0});
        for(int k=0 ; k<4 ; k++){
            int nr=row+dr[k];
            int nc=col+dc[k];
            if(nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc] && grid[nr][nc]==1){
                dfs(nr,nc,n,m,dr,dc,vis,grid,vec,row0,col0);
            }
        }
    }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        int dr[4]={0,0,1,-1};
        int dc[4]={1,-1,0,0};
        
        set<vector<pair<int,int>>>st;
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(!vis[i][j] && grid[i][j]==1){
                    vector<pair<int,int>>vec;
                    dfs(i,j,n,m,dr,dc,vis,grid,vec,i,j);
                    st.insert(vec);
                }
            }
        }
        return st.size();
    }
};
